1. 틀린 부분 찾기
#include<stdio.h> 
void main() { 
int i, j; 
scanf("%d", &i);
scanf("%d", &i);
printf("두 수의 합은 : %d 입니다.\n", i, j); 
return 0; 
}
주소값 입력과 세미콜론을 써야 하고 void main이므로 
return 0;을 지워야 한다

2. 아래 코드의 실행 결과
#include<stdio.h> 
void main() { 
int i = 2018, j = 2017; 
double d = 3.1415;
char c = 'a';
printf("%d\n",sizeof(i) ); 
printf("%d\n",sizeof(j) ); 
printf("%d\n",sizeof(d) ); 
printf("%d\n",sizeof(c) ); 
}
4
4
8
1
int는 4비이트이고 double은 8바이트이고 char은 1바이트이므로
4,4,8,1이 나온다.

4. 빈칸 채우기
 #include<stdio.h> 
void main() { 
char ch;
printf("문자 입력  : ");
scanf("□", &ch);

printf("□의 아스키 코드는 □입니다", ch , ch);
}
%c, %c, %d
글자는 %c로 입력받고 출력하며 %d로 숫자를 출력한다

5. 아래 코드의 실행 결과
 #include<stdio.h> 
void main() { 
int a = 10, b = 3;
printf("%d", a+b*b);
printf("%d", a/b);
printf("%d", a%b);
printf("%.2f", (double)a/b+0.005 );
}
19313.34
10+3*3=19이다.
10/3=3.333....이지만 int이므로 소수점 위까지만 출력한다.
10/3=3...1이므로 나머지인 1을 출력한다.
10/3=3.333....이고 3.333....+0.005 한 후 소수 셋째 자리에서 
반올림하면 3.34가 출력된다.

7. 아래 코드의 실행 결과
#include<stdio.h>  
void main() {  
int a = 10;
a++;
++a;
a--;
printf("%d", a++);
printf("%d",--a);
}
1111
++a로 10에 1이 더해진 후 printf문이 작동되고 a++로 11에 1이 더해진 후 --a로 12에서 1이 빠져서 1111이 출력된다.

8. 빈칸 채우기
#include<stdio.h>  
void main() {  
int x, y, max;
printf("두 개의 정수 입력 : ");
scanf("%d %d", &x, &y);
max = □
printf("큰 수 : %d", max);
}
x > y ? x : y;
참일때 왼쪽값을 대입하므로 큰 수인 x를 대입해 주어야 한다

10. 빈칸 채우기
#include<stdio.h>  
void main() {  
int year;
scanf("%d", &year);
if(□)
printf("%d년은 윤년이다.", year);
else
printf("%d년은 윤년이 아니다.", year);
}
year % 4 = 0 && year % 100 || year % 400 = 0
논리 연산자를 사용하여 연도/4=0과 연도/100=0을 동시에 충족하거나
연도/400=0을 충족하는 연도는 윤년으로 출력하도록 한다.

11. 틀린 부분 찾기
#include<stdio.h>  
void main() {  
char grade;
printf("등급을 입력하세요 ");
scanf("%c", &grade);
switch(grade){
case 'A' : printf("90점 이상"); break;
case 'B' : printf("80점 이상"); break;
default : printf("80점 이하");
}
}
틀린 곳이 없다.

12. 틀린 부분 찾기
#include<stdio.h>  
void main() {  
int count , i=1;
printf("원하는 수");
scanf("%d", &count);
while(i <= count){
printf("%-3d", i);
i++
}
}
i가 증감이 일어나지 않으므로 1만 계속 찍히게 된다.
따라서 i++을 넣어 증가하게 만들어야 한다.

14. 빈칸 채우기
#include<stdio.h>  
void main() {  
int a = 2018;
printf("a의 10진수 주소 값: %d", &a);
printf("a의 16진수 주소 값: %x", &a);
}
10진수의 주소값은 %d이고 16진수의 주소값은 %x이다.

15. 아래 코드의 실행 결과
#include<stdio.h>  
void main() {  
int i;
for(i=0;i<25;i++){
if(i % 2 == 0)
printf("Welcome!!\n");
}
}
0부터 24까지 짝수 번호에만 출력하므로 13번이 출력된다.
16. 아래 코드의 실행 결과
#include<stdio.h>  
void main() {  
int i, j;
for(i=1;i<5;i++){
for(j=1;j<=7;j++){
if(i>=4)
break;
if(j==3)
continue;
printf("Welcome!!");
}
}
}
for문을 사용해 5까지 출력하고 7까지 출력해 18번 출력된다

17. 빈칸 채우기
#include<stdio.h>  
void main() {  
int i, num, fact = 1;
printf("수를 입력 : ");
scanf("%d", &num);
for(i=2;□i++)
□
}
printf("%d!=%d", num, fact);
i는 num까지 실행되어야 하고 fact는 i까지의 수를 모두 곱해야 하므로
i<=num
fact*i

18. scanf로 입력을 받을 때 &를 사용하지 않는 문자
%s

19. 아래 코드의 실행 결과
#include<stdio.h>  
void main() {  
int class;
printf("당신의 반을 입력하시오");
scanf("%d", &class);
switch(class){
case 4 : printf("4반 행운의 숫자는 %d\n", (class*4 < 17) + 3 * 6);
case 5 : printf("4반 행운의 숫자는 %d\n", (class*6%4 < 2) + 7);
case 6 : printf("4반 행운의 숫자는 %d\n", (class/4 && class - 6)* 2);
default : printf("행운의 숫자는 없습니다.\n");
}
}
5를 입력하면 5*6%4= 2<2 + 7이므로 5반 행운의 숫자는 7이 출력된다.

20. 빈칸 채우기
#include<stdio.h>  
void main() {  
int i, prime;
printf("수를 입력하시오 ");
scanf("%d", &prime);
for(i=2;i<prime;i++){
if(□){
printf("소수가 아닙니다");
break;
}
}
if(i==prime-1)
printf("소수입니다");
}
prime%i=0